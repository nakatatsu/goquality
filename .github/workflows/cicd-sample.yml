name: Go Quality Check

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  GO_VERSION: '1.24'
  DOCKER_IMAGE: 'ghcr.io/yourorg/go-quality:latest'

jobs:
  format:
    runs-on: ubuntu-latest
    container:
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check formatting with gofumpt
        run: |
          gofumpt -l -d .
          if [ -n "$(gofumpt -l .)" ]; then
            echo "::error::Code is not formatted. Run 'gofumpt -w .' to fix."
            exit 1
          fi
      
      - name: Check imports with goimports
        run: |
          goimports -l -d .
          if [ -n "$(goimports -l .)" ]; then
            echo "::error::Imports are not organized. Run 'goimports -w .' to fix."
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    container:
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Run go vet
        run: go vet ./...
      
      - name: Run staticcheck
        run: staticcheck ./...
      
      - name: Run golangci-lint
        run: golangci-lint run --timeout=5m

  module-health:
    runs-on: ubuntu-latest
    container:
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check go.mod tidy
        run: |
          go mod tidy -v
          if [ -n "$(git diff --exit-code go.mod go.sum)" ]; then
            echo "::error::go.mod or go.sum is not tidy. Run 'go mod tidy' to fix."
            git diff go.mod go.sum
            exit 1
          fi
      
      - name: Verify modules
        run: go mod verify

  test:
    runs-on: ubuntu-latest
    container:
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4

      
      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "::error::Coverage is below 80% threshold"
            exit 1
          fi
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html

  security:
    runs-on: ubuntu-latest
    container:
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Run govulncheck
        run: |
          govulncheck ./...
        continue-on-error: true
      
      - name: Run gosec
        run: |
          gosec -fmt=sarif -out=gosec-results.sarif ./...
        continue-on-error: true
      
      - name: Run OSV Scanner
        run: |
          osv-scanner --format sarif --output osv-results.sarif .
        continue-on-error: true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            gosec-results.sarif
            osv-results.sarif

  license-check:
    runs-on: ubuntu-latest
    container:
      image: ${{ env.DOCKER_IMAGE }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check licenses
        run: |
          # Simple license check - can be enhanced with license-eye or similar
          echo "Checking for incompatible licenses..."
          go list -m -json all | jq -r '.Path' | while read -r module; do
            echo "Checking $module"
          done

  pr-comment:
    if: github.event_name == 'pull_request'
    needs: [format, lint, test, security]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
      
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage.out', 'utf8');
            const coverageMatch = coverage.match(/total:\s+\(statements\)\s+(\d+\.\d+)%/);
            const coveragePercent = coverageMatch ? coverageMatch[1] : 'N/A';
            
            const comment = `## 🔍 Quality Check Results
            
            ✅ **All quality checks passed!**
            
            ### 📊 Test Coverage: ${coveragePercent}%
            
            ### 🛡️ Security Scans
            - ✅ govulncheck completed
            - ✅ gosec completed
            - ✅ OSV Scanner completed
            
            ---
            🤖 Generated by Go Quality Workflow`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });